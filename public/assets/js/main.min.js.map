{"version":3,"sources":["assets/js/main.js"],"names":["$","window","on","vh","innerHeight","css","trigger","$video","document","querySelector","$canvas","ctx","getContext","streamObj","front","loadedDataHandler","camera","img","Image","src","frameReady","onload","openCam","cameraStart","navigator","mediaDevices","getUserMedia","video","facingMode","width","ideal","height","then","async","stream","srcObject","removeEventListener","Promise","resolve","reject","videoWidth","videoHeight","addEventListener","await","faceMesh","FaceMesh","locateFile","file","setOptions","maxNumFaces","refineLandmarks","minDetectionConfidence","minTrackingConfidence","onResults","results","requestAnimationFrame","clearRect","save","translate","scale","drawImage","image","multiFaceLandmarks","landmarks","drawConnectors","FACEMESH_LIPS","color","length","minX","Infinity","minY","maxX","maxY","point","x","y","Math","min","max","faceWidth","innerWidth","topOfHead","imgW","restore","alert","Camera","onFrame","send","addClass","start","catch","error","message","name","removeClass","getTracks","forEach","track","stop","undefined"],"mappings":"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","file":"main.min.js","sourcesContent":["$(function () {\n    $(window).on('resize.vh', function () {\n        var vh = window.innerHeight * 0.01;\n        $('html').css('--vh', vh + 'px');\n    }).trigger('resize.vh');\n\n    const $video = document.querySelector('[data-camera-video]');\n    const $canvas = document.querySelector('[data-camera-canvas]');\n    const ctx = $canvas.getContext('2d');\n    let streamObj; // 預計用來存放 串流相關的物件(MediaStream)\n    let front = true;\n    let loadedDataHandler; // 全局變數存儲 loadeddata 事件處理程序\n    let camera;\n    const img = new Image();\n    img.src = './assets/image/touch/logo.png'; // 你想顯示的圖片路徑\n    img.onload = () => {\n        // 開啟 webcam\n        openCam();\n    };\n\n    let frameReady = false;\n    let cameraStart = false;\n\n    function openCam() {\n        // 開啟視訊鏡頭，瀏覽器會跳詢問視窗\n        navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: front ? 'user' : 'environment',\n                width: { ideal: 2400 },\n                height: { ideal: 3200 }\n            }\n        }).then(async function (stream) {\n            streamObj = stream;         // 將串流物件放在 streamObj 全域變數，方便後面關閉 webcam 時會用到\n            $video.srcObject = stream;  // video 標籤顯示 webcam 畫面\n\n            // 先移除之前的事件綁定\n            if (loadedDataHandler) {\n                $video.removeEventListener('loadeddata', loadedDataHandler);\n            }\n\n            const addLoadedDataHandler = new Promise((resolve, reject) => {\n                // 重新定義並綁定 loadeddata 事件\n                loadedDataHandler = function () {\n                    // 將 video 標籤的影片寬高，顯示於 canvas 標籤上\n                    $canvas.width = $video.videoWidth;\n                    $canvas.height = $video.videoHeight;\n\n                    resolve();\n                };\n\n                // 綁定事件\n                $video.addEventListener('loadeddata', loadedDataHandler, false);\n            });\n            await addLoadedDataHandler;\n\n            const faceMesh = new FaceMesh({\n                locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`,\n            });\n\n            faceMesh.setOptions({\n                maxNumFaces: 1,\n                refineLandmarks: true,\n                minDetectionConfidence: 0.5,\n                minTrackingConfidence: 0.5,\n            });\n\n            faceMesh.onResults(onResults);\n\n            function onResults(results) {\n                requestAnimationFrame(() => {\n                    // 清空Canvas\n                    ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n                    ctx.save();\n                    if (front) {\n                        // 水平反轉\n                        ctx.translate($canvas.width, 0);\n                        ctx.scale(-1, 1);\n                    }\n                    ctx.drawImage(results.image, 0, 0, $canvas.width, $canvas.height);\n\n                    if (results.multiFaceLandmarks) {\n                        for (const landmarks of results.multiFaceLandmarks) {\n                            // drawConnectors(ctx, landmarks, FACEMESH_TESSELATION,\n                            //     { color: '#C0C0C070', lineWidth: 1 });\n                            // drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYE, { color: '#FF3030' });\n                            // drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYE, { color: '#30FF30' });\n                            // drawConnectors(ctx, landmarks, FACEMESH_FACE_OVAL, { color: '#E0E0E0' });\n                            drawConnectors(ctx, landmarks, FACEMESH_LIPS, { color: '#E0E0E0' });\n                        }\n                    }\n\n                    if (results.multiFaceLandmarks && results.multiFaceLandmarks.length > 0) {\n                        const landmarks = results.multiFaceLandmarks[0];\n\n                        // 計算臉部的外接矩形範圍\n                        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n                        for (const point of landmarks) {\n                            const x = point.x * $canvas.width;\n                            const y = point.y * $canvas.height;\n                            minX = Math.min(minX, x);\n                            minY = Math.min(minY, y);\n                            maxX = Math.max(maxX, x);\n                            maxY = Math.max(maxY, y);\n                        }\n\n                        // 計算臉部面積\n                        const faceWidth = maxX - minX;\n                        const faceHeight = maxY - minY;\n                        const faceArea = faceWidth * faceHeight;\n\n                        // 根據面積調整圖片大小，面積越大，頭越近\n                        const scale = faceArea / (window.innerWidth * window.innerHeight);\n                        // $('.text').text(scale);\n\n                        // 計算頭頂的座標\n                        const topOfHead = landmarks[10];\n                        const x = topOfHead.x * $canvas.width;\n                        const y = topOfHead.y * $canvas.height;\n\n                        const imgW = faceWidth + (scale * 10);\n                        // 根據比例繪製圖片\n                        ctx.drawImage(img, x - imgW / 2, y - imgW, imgW, imgW);\n                    }\n\n                    ctx.restore();\n                });\n            }\n\n            alert(`${$video.videoWidth}, ${$video.videoHeight}`)\n            camera = new Camera($video, {\n                onFrame: async () => {\n                    await faceMesh.send({ image: $video });\n\n                    if (!frameReady) {\n                        frameReady = true;\n                        alert('frameReady');\n                    }\n                    if (frameReady && cameraStart) {\n                        $('.camera-loading').addClass('hide');\n                    }\n                },\n                width: $video.videoWidth,\n                height: $video.videoHeight,\n                facingMode: front ? 'user' : 'environment'\n            });\n            camera.start();\n            if (!cameraStart) {\n                cameraStart = true;\n                alert('cameraStart');\n            }\n            if (frameReady && cameraStart) {\n                $('.camera-loading').addClass('hide');\n            }\n\n        }).catch(function (error) {     // 若無法取得畫面，執行 catch\n            alert('取得相機訪問權限失敗: ', error.message, error.name);\n        });\n    }\n\n    $('[data-camera-direction]').on('click', function () {\n        cameraStart = false;\n        frameReady = false;\n        $('.camera-loading').removeClass('hide');\n        streamObj.getTracks().forEach(track => track.stop());\n        if (camera) {\n            camera.stop(); // 停止之前的 Camera\n            camera = undefined;\n        }\n        front = !front;\n        openCam();\n    });\n});"],"sourceRoot":"/"}